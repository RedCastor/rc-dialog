{"version":3,"sources":["../bower_components/ng-dialog/js/ngDialog.js"],"names":["root","factory","module","exports","angular","require","define","amd","this","m","$el","element","isDef","isDefined","style","document","body","documentElement","animationEndSupport","animation","WebkitAnimation","MozAnimation","MsAnimation","OAnimation","animationEndEvent","forceElementsReload","html","scopes","openIdStack","activeBodyClasses","keydownIsBound","openOnePerName","closeByNavigationDialogStack","UI_ROUTER_VERSION_LEGACY","UI_ROUTER_VERSION_ONE_PLUS","provider","defaults","className","appendClassName","disableAnimation","plain","showClose","closeByDocument","closeByEscape","closeByNavigation","appendTo","preCloseCallback","onOpenCallback","overlay","cache","trapFocus","preserveFocus","ariaAuto","ariaRole","ariaLabelledById","ariaLabelledBySelector","ariaDescribedById","ariaDescribedBySelector","bodyClassName","width","height","setForceHtmlReload","_useIt","setForceBodyReload","setDefaults","newDefaults","extend","setOpenOnePerName","isOpenOne","closeByDocumentHandler","globalID","dialogsCount","defers","$get","$document","$templateCache","$compile","$q","$http","$rootScope","$timeout","$window","$controller","$injector","$elements","privateMethods","onDocumentKeydown","event","keyCode","publicMethods","close","activate","$dialog","data","on","onTrapFocusKeydown","deactivate","off","deactivateAll","els","forEach","el","setBodyPadding","originalBodyPadding","parseInt","css","$broadcast","resetBodyPadding","performCloseDialog","value","options","id","attr","scope","Hammer","hammerTime","destroy","unbind","hasClass","previousFocus","focus","$destroy","bind","closeDialogElement","addClass","resolve","remainingDialogs","splice","indexOf","length","undefined","remove","removeClass","closeDialog","isFunction","preCloseCallbackResult","call","isObject","closePromise","then","ev","currentTarget","getActiveDialog","isTab","backward","shiftKey","handleTab","focusableElements","getFocusableElements","currentFocus","activeElement","focusIndex","Array","prototype","isFocusIndexUnknown","isFirstElementFocused","isLastElementFocused","cancelEvent","preventDefault","stopPropagation","blur","autoFocus","dialogEl","autoFocusEl","querySelector","contentElements","filterVisibleElements","querySelectorAll","contentElement","rawElements","tabbableElements","filterTabbableElements","tabbableFocusableElements","i","push","visibleFocusableElements","offsetWidth","offsetHeight","dialogs","applyAriaAttributes","detectedRole","applyAriaAttribute","selector","dialogId","firstMatch","generatedId","detectUIRouter","has","getRouterLocationEventName","__PRIVATE__","open","opts","dialogID","name","toLowerCase","replace","isOpen","defer","$dialogParent","$dialogContent","copy","localID","merge","$new","key","isString","get","invoke","all","template","tmpl","loadTemplateUrl","loadTemplate","templateUrl","locals","setup","hasOverlayClass","ngDialogId","firstLetter","ngDialogData","fromJson","String","option","callback","$parent","closeThisDialog","controller","isArray","label","controllerAs","controllerInstance","$scope","$element","bindToController","instance","confirm","$activeDialogs","widthDiffs","innerWidth","prop","scrollBarWidth","append","dialog","isOverlay","target","isCloseBtn","promise","config","headers","Accept","res","openConfirm","getElementById","openResult","reject","topDialogId","closeAll","$all","getOpenDialogs","getDefaults","elementName","find","eventName","$on","uiRouterVersion","onStart","trans","toCloseDialog","pop","$event","directive","ngDialog","restrict","ngDialogScope","link","elem","attrs","e","ngDialogClosePrevious","ngDialogClass","ngDialogAppendClass","ngDialogController","ngDialogControllerAs","ngDialogBindToController","ngDialogDisableAnimation","ngDialogShowClose","ngDialogCloseByDocument","ngDialogCloseByEscape","ngDialogOverlay","ngDialogPreCloseCallback","ngDialogOnOpenCallback","ngDialogBodyClass"],"mappings":"CAMC,SAAUA,EAAMC,GACS,oBAAXC,QAA0BA,OAAOC,SAEjB,oBAAZC,QACPH,EAAQI,QAAQ,YAEhBJ,EAAQG,SAEZF,OAAOC,QAAU,YACQ,mBAAXG,QAAyBA,OAAOC,IAE9CD,OAAO,CAAC,WAAYL,GAGpBA,EAAQD,EAAKI,SAdrB,CAgBEI,KAAM,SAAUJ,GACd,aAEA,IAAIK,EAAIL,EAAQF,OAAO,WAAY,IAE/BQ,EAAMN,EAAQO,QACdC,EAAQR,EAAQS,UAChBC,GAASC,SAASC,MAAQD,SAASE,iBAAiBH,MACpDI,EAAsBN,EAAME,EAAMK,YAAcP,EAAME,EAAMM,kBAAoBR,EAAME,EAAMO,eAAiBT,EAAME,EAAMQ,cAAgBV,EAAME,EAAMS,YACrJC,EAAoB,+EAGpBC,EAAsB,CAAEC,MAAM,EAAOV,MAAM,GAC3CW,EAAS,GACTC,EAAc,GACdC,EAAoB,GACpBC,GAAiB,EACjBC,GAAiB,EACjBC,EAA+B,GAE/BC,EAA2B,SAC3BC,EAA6B,SA44BjC,OA14BAzB,EAAE0B,SAAS,WAAY,WACnB,IAAIC,EAAW5B,KAAK4B,SAAW,CAC3BC,UAAW,yBACXC,gBAAiB,GACjBC,kBAAkB,EAClBC,OAAO,EACPC,WAAW,EACXC,iBAAiB,EACjBC,eAAe,EACfC,mBAAmB,EACnBC,UAAU,EACVC,kBAAkB,EAClBC,gBAAgB,EAChBC,SAAS,EACTC,OAAO,EACPC,WAAW,EACXC,eAAe,EACfC,UAAU,EACVC,SAAU,KACVC,iBAAkB,KAClBC,uBAAwB,KACxBC,kBAAmB,KACnBC,wBAAyB,KACzBC,cAAe,gBACfC,MAAO,KACPC,OAAQ,MAGZpD,KAAKqD,mBAAqB,SAAUC,GAChCrC,EAAoBC,KAAOoC,IAAU,GAGzCtD,KAAKuD,mBAAqB,SAAUD,GAChCrC,EAAoBT,KAAO8C,IAAU,GAGzCtD,KAAKwD,YAAc,SAAUC,GACzB7D,EAAQ8D,OAAO9B,EAAU6B,IAG7BzD,KAAK2D,kBAAoB,SAAUC,GAC/BrC,EAAiBqC,IAAa,GAGlC,IAAoCC,EAAhCC,EAAW,EAAGC,EAAe,EAA2BC,EAAS,GAErEhE,KAAKiE,KAAO,CAAC,YAAa,iBAAkB,WAAY,KAAM,QAAS,aAAc,WAAY,UAAW,cAAe,YACvH,SAAUC,EAAWC,EAAgBC,EAAUC,EAAIC,EAAOC,EAAYC,EAAUC,EAASC,EAAaC,GAClG,IAAIC,EAAY,GAEZC,EAAiB,CACjBC,kBAAmB,SAAUC,GACH,KAAlBA,EAAMC,SACNC,EAAcC,MAAM,YAI5BC,SAAU,SAASC,GACDA,EAAQC,KAAK,oBAEf3C,YACR0C,EAAQE,GAAG,UAAWT,EAAeU,oBAGrCX,EAAUpE,KAAK8E,GAAG,UAAWT,EAAeU,sBAIpDC,WAAY,SAAUJ,GAClBA,EAAQK,IAAI,UAAWZ,EAAeU,oBACtCX,EAAUpE,KAAKiF,IAAI,UAAWZ,EAAeU,qBAGjDG,cAAe,SAAUC,GACrB/F,EAAQgG,QAAQD,EAAI,SAASE,GACzB,IAAIT,EAAUxF,EAAQO,QAAQ0F,GAC9BhB,EAAeW,WAAWJ,MAIlCU,eAAgB,SAAU3C,GACtB,IAAI4C,EAAsBC,SAAUpB,EAAUpE,KAAKyF,IAAI,kBAAoB,EAAI,IAC/ErB,EAAUpE,KAAKyF,IAAI,gBAAkBF,EAAsB5C,EAAS,MACpEyB,EAAUpE,KAAK6E,KAAK,6BAA8BU,GAClDxB,EAAW2B,WAAW,sBAAuB/C,IAGjDgD,iBAAkB,WACd,IAAIJ,EAAsBnB,EAAUpE,KAAK6E,KAAK,8BAC1CU,EACAnB,EAAUpE,KAAKyF,IAAI,gBAAiBF,EAAsB,MAE1DnB,EAAUpE,KAAKyF,IAAI,gBAAiB,IAExC1B,EAAW2B,WAAW,sBAAuB,IAGjDE,mBAAoB,SAAUhB,EAASiB,GACnC,IAAIC,EAAUlB,EAAQC,KAAK,oBACvBkB,EAAKnB,EAAQoB,KAAK,MAClBC,EAAQtF,EAAOoF,GAGnB,GAFA1B,EAAeW,WAAWJ,GAErBqB,EAAL,CAKA,QAA8B,IAAnBhC,EAAQiC,OAAwB,CACvC,IAAIC,EAAaF,EAAME,WACvBA,EAAWlB,IAAI,MAAO5B,GACtB8C,EAAWC,SAAWD,EAAWC,iBAC1BH,EAAME,gBAEbvB,EAAQyB,OAAO,SAGE,IAAjB9C,GACAa,EAAUpE,KAAKqG,OAAO,UAAWhC,EAAeC,mBAG/CM,EAAQ0B,SAAS,sBAClB/C,GAAgB,GAGpB,IAAIgD,EAAgB3B,EAAQC,KAAK,0BAC7B0B,GAAiBA,EAAcC,OAC/BD,EAAcC,QAGlBzC,EAAW2B,WAAW,mBAAoBd,EAASiB,GACnDtC,EAAeA,EAAe,EAAI,EAAIA,EAClCrD,IAAwB4F,EAAQvE,kBAChC0E,EAAMQ,WACN7B,EAAQyB,OAAO7F,GAAmBkG,KAAKlG,EAAmB,WACtD6D,EAAesC,mBAAmB/B,EAASiB,KAC5Ce,SAAS,sBAEZX,EAAMQ,WACNpC,EAAesC,mBAAmB/B,EAASiB,IAE3CrC,EAAOuC,KACPvC,EAAOuC,GAAIc,QAAQ,CACfd,GAAIA,EACJF,MAAOA,EACPjB,QAASA,EACTkC,iBAAkBvD,WAEfC,EAAOuC,IAEdpF,EAAOoF,WACApF,EAAOoF,GAElBnF,EAAYmG,OAAOnG,EAAYoG,QAAQjB,GAAK,GACvCnF,EAAYqG,SACb7C,EAAUpE,KAAKqG,OAAO,UAAWhC,EAAeC,mBAChDxD,GAAiB,GAGD,GAAhByC,IAEAF,OAAyB6D,KAIjCP,mBAAoB,SAAS/B,EAASiB,GAClC,IAAIC,EAAUlB,EAAQC,KAAK,oBAC3BD,EAAQuC,SAERtG,EAAkBkG,OAAOlG,EAAkBmG,QAAQlB,EAAQpD,eAAgB,IACjB,IAAtD7B,EAAkBmG,QAAQlB,EAAQpD,iBAClC0B,EAAU1D,KAAK0G,YAAYtB,EAAQpD,eACnC0B,EAAUpE,KAAKoH,YAAYtB,EAAQpD,gBAGlB,IAAjBa,GACAc,EAAesB,mBAGnB5B,EAAW2B,WAAW,kBAAmBd,EAASiB,IAGtDwB,YAAa,SAAUzC,EAASiB,GAC5B,IAAI/D,EAAmB8C,EAAQC,KAAK,6BAEpC,GAAI/C,GAAoB1C,EAAQkI,WAAWxF,GAAmB,CAE1D,IAAIyF,EAAyBzF,EAAiB0F,KAAK5C,EAASiB,GAE5D,GAAIzG,EAAQqI,SAASF,GACbA,EAAuBG,aACvBH,EAAuBG,aAAaC,KAAK,WACrCtD,EAAeuB,mBAAmBhB,EAASiB,IAC5C,WACC,OAAO,IAGX0B,EAAuBI,KAAK,WACxBtD,EAAeuB,mBAAmBhB,EAASiB,IAC5C,WACC,OAAO,QAGZ,CAAA,IAA+B,IAA3B0B,EAGP,OAAO,EAFPlD,EAAeuB,mBAAmBhB,EAASiB,SAK/CxB,EAAeuB,mBAAmBhB,EAASiB,IAInDd,mBAAoB,SAAS6C,GACzB,IACIhD,EADAS,EAAKjG,EAAQO,QAAQiI,EAAGC,eAG5B,GAAIxC,EAAGiB,SAAS,YACZ1B,EAAUS,OAIV,GAAgB,QAFhBT,EAAUP,EAAeyD,mBAGrB,OAIR,IAAIC,EAAwB,IAAfH,EAAGpD,QACZwD,GAA4B,IAAhBJ,EAAGK,SAEfF,GACA1D,EAAe6D,UAAUtD,EAASgD,EAAII,IAI9CE,UAAW,SAAStD,EAASgD,EAAII,GAC7B,IAAIG,EAAoB9D,EAAe+D,qBAAqBxD,GAE5D,GAAiC,IAA7BuD,EAAkBlB,OAAtB,CAOA,IAAIoB,EAAetI,SAASuI,cACxBC,EAAaC,MAAMC,UAAUzB,QAAQQ,KAAKW,EAAmBE,GAE7DK,GAAuC,IAAhBH,EACvBI,EAAwC,IAAfJ,EACzBK,EAAwBL,IAAeJ,EAAkBlB,OAAS,EAElE4B,GAAc,EAEdb,GACIU,GAAuBC,KACvBR,EAAkBA,EAAkBlB,OAAS,GAAGT,QAChDqC,GAAc,IAGdH,GAAuBE,KACvBT,EAAkB,GAAG3B,QACrBqC,GAAc,GAIlBA,IACAjB,EAAGkB,iBACHlB,EAAGmB,wBA7BChJ,SAASuI,eAAiBvI,SAASuI,cAAcU,MACjDjJ,SAASuI,cAAcU,QAgCnCC,UAAW,SAASrE,GAChB,IAAIsE,EAAWtE,EAAQ,GAGnBuE,EAAcD,EAASE,cAAc,gBACzC,GAAoB,OAAhBD,IACAA,EAAY3C,QAERzG,SAASuI,gBAAkBa,GAHnC,CAUA,IAAIhB,EAAoB9D,EAAe+D,qBAAqBxD,GAE5D,GAA+B,EAA3BuD,EAAkBlB,OAClBkB,EAAkB,GAAG3B,YADzB,CAMA,IAAI6C,EAAkBhF,EAAeiF,sBAAsBJ,EAASK,iBAAiB,6BAErF,GAA6B,EAAzBF,EAAgBpC,OAAY,CAC5B,IAAIuC,EAAiBH,EAAgB,GACrC3J,EAAI8J,GAAgBxD,KAAK,WAAY,MAAMP,IAAI,UAAW,KAC1D+D,EAAehD,YAIvB4B,qBAAsB,SAAUxD,GAC5B,IAEI6E,EAFW7E,EAAQ,GAEI2E,iBAhUhB,gLAmUPG,EAAmBrF,EAAesF,uBAAuBF,GAE7D,OAAOpF,EAAeiF,sBAAsBI,IAGhDC,uBAAwB,SAAUxE,GAG9B,IAFA,IAAIyE,EAA4B,GAEvBC,EAAI,EAAGA,EAAI1E,EAAI8B,OAAQ4C,IAAK,CACjC,IAAIxE,EAAKF,EAAI0E,GAEoB,OAA7BnK,EAAI2F,GAAIW,KAAK,aACb4D,EAA0BE,KAAKzE,GAIvC,OAAOuE,GAGXN,sBAAuB,SAAUnE,GAG7B,IAFA,IAAI4E,EAA2B,GAEtBF,EAAI,EAAGA,EAAI1E,EAAI8B,OAAQ4C,IAAK,CACjC,IAAIxE,EAAKF,EAAI0E,IAEQ,EAAjBxE,EAAG2E,aAAqC,EAAlB3E,EAAG4E,eACzBF,EAAyBD,KAAKzE,GAItC,OAAO0E,GAGXjC,gBAAiB,WACb,IAAIoC,EAAUnK,SAASwJ,iBAAiB,aAExC,OAAuB,IAAnBW,EAAQjD,OACD,KAIJvH,EAAIwK,EAAQA,EAAQjD,OAAS,KAGxCkD,oBAAqB,SAAUvF,EAASkB,GACpC,GAAIA,EAAQ1D,SAAU,CAClB,IAAK0D,EAAQzD,SAAU,CACnB,IAAI+H,EAAsE,EAAtD/F,EAAe+D,qBAAqBxD,GAASqC,OAC7D,SACA,cAEJnB,EAAQzD,SAAW+H,EAGlBtE,EAAQvD,yBACTuD,EAAQvD,uBAAyB,qBAGhCuD,EAAQrD,0BACTqD,EAAQrD,wBAA0B,qBAItCqD,EAAQzD,UACRuC,EAAQoB,KAAK,OAAQF,EAAQzD,UAGjCgC,EAAegG,mBACXzF,EAAS,kBAAmBkB,EAAQxD,iBAAkBwD,EAAQvD,wBAElE8B,EAAegG,mBACXzF,EAAS,mBAAoBkB,EAAQtD,kBAAmBsD,EAAQrD,0BAGxE4H,mBAAoB,SAASzF,EAASoB,EAAMD,EAAIuE,GAC5C,GAAIvE,EACAnB,EAAQoB,KAAKA,EAAMD,QAIvB,GAAIuE,EAAU,CACV,IAAIC,EAAW3F,EAAQoB,KAAK,MAExBwE,EAAa5F,EAAQ,GAAGwE,cAAckB,GAE1C,IAAKE,EACD,OAGJ,IAAIC,EAAcF,EAAW,IAAMvE,EAMnC,OAJAtG,EAAI8K,GAAYxE,KAAK,KAAMyE,GAE3B7F,EAAQoB,KAAKA,EAAMyE,GAEZA,IAIfC,eAAgB,WAKZ,OAAIvG,EAAUwG,IAAI,gBAEPzJ,IAEFiD,EAAUwG,IAAI,WAEZ1J,GAKf2J,2BAA4B,WACxB,OAAIvG,EAAeqG,iBACR,oBAEJ,yBAIXjG,EAAgB,CAChBoG,YAAaxG,EAoBbyG,KAAM,SAAUC,GACZ,IAAIC,EAAW,KAEf,GADAD,EAAOA,GAAQ,KACXhK,GAAkBgK,EAAKE,OACvBD,EAAWD,EAAKE,KAAKC,cAAcC,QAAQ,MAAO,KAAO,UACrD3L,KAAK4L,OAAOJ,KAFpB,CAMA,IAeIK,EAGApF,EAGArB,EAAS0G,EAAeC,EArBxBzF,EAAU1G,EAAQoM,KAAKpK,GACvBqK,IAAYnI,EAChB0H,EAAWA,GAAY,WAAaS,EACpC7K,EAAYkJ,KAAKkB,QAGW,IAAjBlF,EAAQjB,YACU,IAAdkG,EAAKlG,OACZkG,EAAKlG,KAAO,IAEhBkG,EAAKlG,KAAOzF,EAAQsM,MAAMtM,EAAQoM,KAAK1F,EAAQjB,MAAOkG,EAAKlG,OAG/DzF,EAAQ8D,OAAO4C,EAASiF,GAGxBvH,EAAOwH,GAAYK,EAAQxH,EAAGwH,QAG9B1K,EAAOqK,GAAY/E,EAAQ7G,EAAQqI,SAAS3B,EAAQG,OAASH,EAAQG,MAAM0F,OAAS5H,EAAW4H,OAI/F,IAAI9E,EAAUzH,EAAQ8D,OAAO,GAAI4C,EAAQe,SAyMzC,OAvMAzH,EAAQgG,QAAQyB,EAAS,SAAUhB,EAAO+F,GACtC/E,EAAQ+E,GAAOxM,EAAQyM,SAAShG,GAAS1B,EAAU2H,IAAIjG,GAAS1B,EAAU4H,OAAOlG,EAAO,KAAM,KAAM+F,KAGxG/H,EAAGmI,IAAI,CACHC,SAuNJ,SAAuBC,GACnB,IAAKA,EACD,MAAO,iBAGX,GAAI9M,EAAQyM,SAASK,IAASpG,EAAQtE,MAClC,OAAO0K,EAGX,MAA6B,kBAAlBpG,EAAQ7D,OAAwB6D,EAAQ7D,MAI5CkK,EAAgBD,EAAM,CAACjK,MAAO0B,IAH1BwI,EAAgBD,EAAM,CAACjK,OAAO,IAjO/BmK,CAAatG,EAAQmG,UAAYnG,EAAQuG,aACnDC,OAAQzI,EAAGmI,IAAInF,KAChBc,KAAK,SAAU4E,GACd,IAAIN,EAAWM,EAAMN,SACjBK,EAASC,EAAMD,OAEfxG,EAAQrE,YACRwK,GAAY,iEAGhB,IAAIO,EAAkB1G,EAAQ9D,QAAU,GAAK,uBAU7C,IATA4C,EAAUlF,EAAI,YAAcsL,EAAW,oBAAsBwB,EAAkB,aACvE9L,KAAMoF,EAAQ9D,QAClB,qFAAuFiK,EAAW,SAClG,iDAAmDA,EAAW,UAElErH,EAAQC,KAAK,mBAAoBiB,GAEjCG,EAAMwG,WAAazB,EAEflF,EAAQjB,MAAQzF,EAAQyM,SAAS/F,EAAQjB,MAAO,CAChD,IAAI6H,EAAc5G,EAAQjB,KAAKsG,QAAQ,OAAQ,IAAI,GACnDlF,EAAM0G,aAAgC,MAAhBD,GAAuC,MAAhBA,EAAuBtN,EAAQwN,SAAS9G,EAAQjB,MAAQ,IAAIgI,OAAO/G,EAAQjB,MACxHoB,EAAM0G,aAAaF,WAAazB,OACzBlF,EAAQjB,MAAQzF,EAAQqI,SAAS3B,EAAQjB,QAChDoB,EAAM0G,aAAe7G,EAAQjB,KAC7BoB,EAAM0G,aAAaF,WAAazB,GAwEpC,GArEIlF,EAAQzE,WACRuD,EAAQgC,SAASd,EAAQzE,WAGzByE,EAAQxE,iBACRsD,EAAQgC,SAASd,EAAQxE,iBAGzBwE,EAAQnD,QACR4I,EAAiB3G,EAAQ,GAAGwE,cAAc,qBACtChK,EAAQyM,SAAS/F,EAAQnD,OACzB4I,EAAezL,MAAM6C,MAAQmD,EAAQnD,MAErC4I,EAAezL,MAAM6C,MAAQmD,EAAQnD,MAAQ,MAIjDmD,EAAQlD,SACR2I,EAAiB3G,EAAQ,GAAGwE,cAAc,qBACtChK,EAAQyM,SAAS/F,EAAQlD,QACzB2I,EAAezL,MAAM8C,OAASkD,EAAQlD,OAEtC2I,EAAezL,MAAM8C,OAASkD,EAAQlD,OAAS,MAInDkD,EAAQvE,kBACRqD,EAAQgC,SAjjBP,+BAqjBD0E,EADAxF,EAAQjE,UAAYzC,EAAQyM,SAAS/F,EAAQjE,UAC7BzC,EAAQO,QAAQI,SAASqJ,cAActD,EAAQjE,WAE/CuC,EAAUpE,KAG9BqE,EAAe8F,oBAAoBvF,EAASkB,GAE5C,CACI,CAAEmF,KAAM,4BAA6BpF,MAAOC,EAAQhE,kBACpD,CAAEmJ,KAAM,0BAA2BpF,MAAOC,EAAQ/D,iBACpDqD,QAAQ,SAAU0H,GAEZ,IAAIC,EADJD,EAAOjH,QAGHzG,EAAQkI,WAAWwF,EAAOjH,OAC1BkH,EAAWD,EAAOjH,MACXzG,EAAQyM,SAASiB,EAAOjH,QAC3BI,IACI7G,EAAQkI,WAAWrB,EAAM6G,EAAOjH,QAChCkH,EAAW9G,EAAM6G,EAAOjH,OACjBI,EAAM+G,SAAW5N,EAAQkI,WAAWrB,EAAM+G,QAAQF,EAAOjH,QAChEkH,EAAW9G,EAAM+G,QAAQF,EAAOjH,OACzB9B,GAAc3E,EAAQkI,WAAWvD,EAAW+I,EAAOjH,UAC1DkH,EAAWhJ,EAAW+I,EAAOjH,SAKrCkH,GACAnI,EAAQC,KAAKiI,EAAO7B,KAAM8B,MAKtC9G,EAAMgH,gBAAkB,SAAUpH,GAC9BxB,EAAegD,YAAYzC,EAASiB,IAGpCC,EAAQoH,aAAe9N,EAAQyM,SAAS/F,EAAQoH,aAAe9N,EAAQ+N,QAAQrH,EAAQoH,aAAe9N,EAAQkI,WAAWxB,EAAQoH,aAAc,CAE/I,IAAIE,EAEAtH,EAAQuH,cAAgBjO,EAAQyM,SAAS/F,EAAQuH,gBACjDD,EAAQtH,EAAQuH,cAGpB,IAAIC,EAAqBpJ,EAAY4B,EAAQoH,WAAY9N,EAAQ8D,OAC7DoJ,EACA,CACIiB,OAAQtH,EACRuH,SAAU5I,KAEd,EACAwI,GAGDtH,EAAQ2H,kBACPrO,EAAQ8D,OAAOoK,EAAmBI,SAAU,CAACjB,WAAYxG,EAAMwG,WAAYE,aAAc1G,EAAM0G,aAAcM,gBAAiBhH,EAAMgH,gBAAiBU,QAAS1H,EAAM0H,UAGvI,mBAAvBL,EACN1I,EAAQC,KAAK,gCAAiCyI,KAE9C1I,EAAQC,KAAK,gCAAiCyI,IAItDtJ,EAAS,WACL,IAAI4J,EAAiB7N,SAASwJ,iBAAiB,aAC/ClF,EAAea,cAAc0I,GAE7BhK,EAASgB,EAAThB,CAAkBqC,GAClB,IAAI4H,EAAa5J,EAAQ6J,WAAa1J,EAAUpE,KAAK+N,KAAK,eAC1D3J,EAAU1D,KAAKkG,SAASd,EAAQpD,eAChC0B,EAAUpE,KAAK4G,SAASd,EAAQpD,eAChC7B,EAAkBiJ,KAAKhE,EAAQpD,eAC/B,IAAIsL,EAAiBH,GAAc5J,EAAQ6J,WAAa1J,EAAUpE,KAAK+N,KAAK,gBACvD,EAAjBC,GACA3J,EAAeiB,eAAe0I,GAElC1C,EAAc2C,OAAOrJ,GAErBP,EAAeM,SAASC,GAEpBkB,EAAQ5D,WACRmC,EAAe4E,UAAUrE,GAGzBkB,EAAQmF,KACRlH,EAAW2B,WAAW,kBAAmB,CAACwI,OAAQtJ,EAASqG,KAAMnF,EAAQmF,OAEzElH,EAAW2B,WAAW,kBAAmBd,GAE7C,IAAI7C,EAAiB6C,EAAQC,KAAK,2BAC9B9C,GAAkB3C,EAAQkI,WAAWvF,IACrCA,EAAeyF,KAAK5C,KAKvB9D,IACDsD,EAAUpE,KAAK0G,KAAK,UAAWrC,EAAeC,mBAC9CxD,GAAiB,GAGjBgF,EAAQlE,mBACRZ,EAA6B8I,KAAKlF,GAGlCkB,EAAQ3D,eACRyC,EAAQC,KAAK,yBAA0B9E,SAASuI,eAGpDjF,EAAyB,SAAUkB,GAC/B,IAAI4J,IAAYrI,EAAQpE,iBAAkBhC,EAAI6E,EAAM6J,QAAQ9H,SAAS,oBACjE+H,EAAa3O,EAAI6E,EAAM6J,QAAQ9H,SAAS,mBAExC6H,GAAaE,IACb5J,EAAcC,MAAME,EAAQoB,KAAK,MAAOqI,EAAa,eAAiB,mBAIhD,IAAnBpK,EAAQiC,SACED,EAAME,WAAalC,EAAQiC,OAAOtB,EAAQ,KAChDE,GAAG,MAAOzB,GAErBuB,EAAQ8B,KAAK,QAASrD,GAK1B,OAFAE,GAAgB,EAETkB,IAGJ,CACHsB,GAAIiF,EACJtD,aAAc2D,EAAMiD,QACpB5J,MAAO,SAAUmB,GACbxB,EAAegD,YAAYzC,EAASiB,KAI5C,SAASsG,EAAiBD,EAAMqC,GAO5B,OANIA,EAASA,GAAU,IAChBC,QAAUD,EAAOC,SAAW,GAEnCpP,EAAQ8D,OAAOqL,EAAOC,QAAS,CAACC,OAAU,cAE1C1K,EAAW2B,WAAW,2BAA4BwG,GAC3CpI,EAAMgI,IAAII,EAAMqC,GAAQ5G,KAAK,SAAS+G,GAEzC,OADA3K,EAAW2B,WAAW,0BAA2BwG,GAC1CwC,EAAI7J,MAAQ,OAuC/B8J,YAAa,SAAU5D,GACnB,IAAIM,EAAQxH,EAAGwH,QACXvF,EAAU1G,EAAQoM,KAAKpK,GAE3B2J,EAAOA,GAAQ,QAGa,IAAjBjF,EAAQjB,YACU,IAAdkG,EAAKlG,OACZkG,EAAKlG,KAAO,IAEhBkG,EAAKlG,KAAOzF,EAAQsM,MAAMtM,EAAQoM,KAAK1F,EAAQjB,MAAOkG,EAAKlG,OAG/DzF,EAAQ8D,OAAO4C,EAASiF,GAExBjF,EAAQG,MAAQ7G,EAAQqI,SAAS3B,EAAQG,OAASH,EAAQG,MAAM0F,OAAS5H,EAAW4H,OACpF7F,EAAQG,MAAM0H,QAAU,SAAU9H,GAC9BwF,EAAMxE,QAAQhB,GACd,IAAIjB,EAAUlF,EAAIK,SAAS6O,eAAeC,EAAW9I,KACrD1B,EAAeuB,mBAAmBhB,EAASiB,IAG/C,IAAIgJ,EAAapK,EAAcqG,KAAKhF,GACpC,GAAI+I,EAOA,OANAA,EAAWnH,aAAaC,KAAK,SAAU9C,GACnC,OAAIA,EACOwG,EAAMyD,OAAOjK,EAAKgB,OAEtBwF,EAAMyD,WAEVzD,EAAMiD,SAIrBlD,OAAQ,SAASrF,GAEb,OAAwB,EADVrG,EAAIK,SAAS6O,eAAe7I,IAC3BkB,QAOnBvC,MAAO,SAAUqB,EAAIF,GACjB,IAAIjB,EAAUlF,EAAIK,SAAS6O,eAAe7I,IAE1C,GAAInB,EAAQqC,OACR5C,EAAegD,YAAYzC,EAASiB,QAEpC,GAAW,YAAPE,EAAkB,CAClB,IAAIgJ,EAAcnO,EAAYA,EAAYqG,OAAS,IACnDrC,EAAUlF,EAAIK,SAAS6O,eAAeG,KAC1BlK,KAAK,oBAAoBlD,eACjC0C,EAAegD,YAAYzC,EAAS,gBAGxCH,EAAcuK,SAASnJ,GAI/B,OAAOpB,GAGXuK,SAAU,SAAUnJ,GAIhB,IAHA,IAAIoJ,EAAOlP,SAASwJ,iBAAiB,aAG5BM,EAAIoF,EAAKhI,OAAS,EAAQ,GAAL4C,EAAQA,IAAK,CACvC,IAAIqE,EAASe,EAAKpF,GAClBxF,EAAegD,YAAY3H,EAAIwO,GAASrI,KAIhDqJ,eAAgB,WACZ,OAAOtO,GAGXuO,YAAa,WACT,OAAO/N,IAIfhC,EAAQgG,QACJ,CAAC,OAAQ,QACT,SAASgK,GAEL,GADAhL,EAAUgL,GAAe1L,EAAU2L,KAAKD,GACpC3O,EAAoB2O,GAAc,CAClC,IAAIE,EAAYjL,EAAeuG,6BAC/B7G,EAAWwL,IAAID,EAAW,WACtBlL,EAAUgL,GAAe1L,EAAU2L,KAAKD,QAOxD,IAAII,EAAkBnL,EAAeqG,iBACrC,GAAI8E,IAAoBtO,EAA4B,CAC7BiD,EAAU2H,IAAI,gBACpB2D,QAAQ,GAAI,SAAUC,GAC/B,KAA6C,EAAtC1O,EAA6BiG,QAAY,CAC5C,IAAI0I,EAAgB3O,EAA6B4O,MACjD,IAAkD,IAA9CvL,EAAegD,YAAYsI,GAC3B,OAAO,SAKlB,CACD,IAAIL,EAAYE,IAAoBvO,EAA2B,oBAAsB,uBACrF8C,EAAWwL,IAAID,EAAW,SAAUO,GAChC,KAA6C,EAAtC7O,EAA6BiG,QAAY,CAC5C,IAAI0I,EAAgB3O,EAA6B4O,OACC,IAA9CvL,EAAegD,YAAYsI,IAC3BE,EAAO/G,oBAMvB,OAAOrE,MAInBhF,EAAEqQ,UAAU,WAAY,CAAC,WAAY,SAAUC,GAC3C,MAAO,CACHC,SAAU,IACV/J,MAAO,CACHgK,cAAe,KAEnBC,KAAM,SAAUjK,EAAOkK,EAAMC,GACzBD,EAAKrL,GAAG,QAAS,SAAUuL,GACvBA,EAAEvH,iBAEF,IAAImH,EAAgB7Q,EAAQS,UAAUoG,EAAMgK,eAAiBhK,EAAMgK,cAAgB,UACnF7Q,EAAQS,UAAUuQ,EAAME,wBAA0BP,EAASrL,MAAM0L,EAAME,uBAEvE,IAAIlP,EAAW2O,EAASZ,cAExBY,EAASjF,KAAK,CACVmB,SAAUmE,EAAML,SAChB1O,UAAW+O,EAAMG,eAAiBnP,EAASC,UAC3CC,gBAAiB8O,EAAMI,oBACvBtD,WAAYkD,EAAMK,mBAClBpD,aAAc+C,EAAMM,qBACpBjD,iBAAkB2C,EAAMO,yBACxBpP,iBAAkB6O,EAAMQ,yBACxB3K,MAAOgK,EACPpL,KAAMuL,EAAMzD,aACZlL,UAAuC,UAA5B2O,EAAMS,oBAAqE,SAA5BT,EAAMS,mBAAsCzP,EAASK,WAC/GC,gBAAmD,UAAlC0O,EAAMU,0BAAiF,SAAlCV,EAAMU,yBAA4C1P,EAASM,iBACjIC,cAA+C,UAAhCyO,EAAMW,wBAA6E,SAAhCX,EAAMW,uBAA0C3P,EAASO,eAC3HK,QAAmC,UAA1BoO,EAAMY,kBAAiE,SAA1BZ,EAAMY,iBAAoC5P,EAASY,SACzGF,iBAAkBsO,EAAMa,0BAA4B7P,EAASU,iBAC7DC,eAAgBqO,EAAMc,wBAA0B9P,EAASW,eACzDW,cAAe0N,EAAMe,mBAAqB/P,EAASsB,uBAOhEjD","file":"ng-dialog.js","sourcesContent":["/*\n * ngDialog - easy modals and popup windows\n * http://github.com/likeastore/ngDialog\n * (c) 2013-2015 MIT License, https://likeastore.com\n */\n\n(function (root, factory) {\n    if (typeof module !== 'undefined' && module.exports) {\n        // CommonJS\n        if (typeof angular === 'undefined') {\n            factory(require('angular'));\n        } else {\n            factory(angular);\n        }\n        module.exports = 'ngDialog';\n    } else if (typeof define === 'function' && define.amd) {\n        // AMD\n        define(['angular'], factory);\n    } else {\n        // Global Variables\n        factory(root.angular);\n    }\n}(this, function (angular) {\n    'use strict';\n\n    var m = angular.module('ngDialog', []);\n\n    var $el = angular.element;\n    var isDef = angular.isDefined;\n    var style = (document.body || document.documentElement).style;\n    var animationEndSupport = isDef(style.animation) || isDef(style.WebkitAnimation) || isDef(style.MozAnimation) || isDef(style.MsAnimation) || isDef(style.OAnimation);\n    var animationEndEvent = 'animationend webkitAnimationEnd mozAnimationEnd MSAnimationEnd oanimationend';\n    var focusableElementSelector = 'a[href], area[href], input:not([disabled]), select:not([disabled]), textarea:not([disabled]), button:not([disabled]), iframe, object, embed, *[tabindex], *[contenteditable]';\n    var disabledAnimationClass = 'ngdialog-disabled-animation';\n    var forceElementsReload = { html: false, body: false };\n    var scopes = {};\n    var openIdStack = [];\n    var activeBodyClasses = [];\n    var keydownIsBound = false;\n    var openOnePerName = false;\n    var closeByNavigationDialogStack = [];\n\n    var UI_ROUTER_VERSION_LEGACY = 'legacy';\n    var UI_ROUTER_VERSION_ONE_PLUS = '1.0.0+';\n\n    m.provider('ngDialog', function () {\n        var defaults = this.defaults = {\n            className: 'ngdialog-theme-default',\n            appendClassName: '',\n            disableAnimation: false,\n            plain: false,\n            showClose: true,\n            closeByDocument: true,\n            closeByEscape: true,\n            closeByNavigation: false,\n            appendTo: false,\n            preCloseCallback: false,\n            onOpenCallback: false,\n            overlay: true,\n            cache: true,\n            trapFocus: true,\n            preserveFocus: true,\n            ariaAuto: true,\n            ariaRole: null,\n            ariaLabelledById: null,\n            ariaLabelledBySelector: null,\n            ariaDescribedById: null,\n            ariaDescribedBySelector: null,\n            bodyClassName: 'ngdialog-open',\n            width: null,\n            height: null\n        };\n\n        this.setForceHtmlReload = function (_useIt) {\n            forceElementsReload.html = _useIt || false;\n        };\n\n        this.setForceBodyReload = function (_useIt) {\n            forceElementsReload.body = _useIt || false;\n        };\n\n        this.setDefaults = function (newDefaults) {\n            angular.extend(defaults, newDefaults);\n        };\n\n        this.setOpenOnePerName = function (isOpenOne) {\n            openOnePerName = isOpenOne || false;\n        };\n\n        var globalID = 0, dialogsCount = 0, closeByDocumentHandler, defers = {};\n\n        this.$get = ['$document', '$templateCache', '$compile', '$q', '$http', '$rootScope', '$timeout', '$window', '$controller', '$injector',\n            function ($document, $templateCache, $compile, $q, $http, $rootScope, $timeout, $window, $controller, $injector) {\n                var $elements = [];\n\n                var privateMethods = {\n                    onDocumentKeydown: function (event) {\n                        if (event.keyCode === 27) {\n                            publicMethods.close('$escape');\n                        }\n                    },\n\n                    activate: function($dialog) {\n                        var options = $dialog.data('$ngDialogOptions');\n\n                        if (options.trapFocus) {\n                            $dialog.on('keydown', privateMethods.onTrapFocusKeydown);\n\n                            // Catch rogue changes (eg. after unfocusing everything by clicking a non-focusable element)\n                            $elements.body.on('keydown', privateMethods.onTrapFocusKeydown);\n                        }\n                    },\n\n                    deactivate: function ($dialog) {\n                        $dialog.off('keydown', privateMethods.onTrapFocusKeydown);\n                        $elements.body.off('keydown', privateMethods.onTrapFocusKeydown);\n                    },\n\n                    deactivateAll: function (els) {\n                        angular.forEach(els,function(el) {\n                            var $dialog = angular.element(el);\n                            privateMethods.deactivate($dialog);\n                        });\n                    },\n\n                    setBodyPadding: function (width) {\n                        var originalBodyPadding = parseInt(($elements.body.css('padding-right') || 0), 10);\n                        $elements.body.css('padding-right', (originalBodyPadding + width) + 'px');\n                        $elements.body.data('ng-dialog-original-padding', originalBodyPadding);\n                        $rootScope.$broadcast('ngDialog.setPadding', width);\n                    },\n\n                    resetBodyPadding: function () {\n                        var originalBodyPadding = $elements.body.data('ng-dialog-original-padding');\n                        if (originalBodyPadding) {\n                            $elements.body.css('padding-right', originalBodyPadding + 'px');\n                        } else {\n                            $elements.body.css('padding-right', '');\n                        }\n                        $rootScope.$broadcast('ngDialog.setPadding', 0);\n                    },\n\n                    performCloseDialog: function ($dialog, value) {\n                        var options = $dialog.data('$ngDialogOptions');\n                        var id = $dialog.attr('id');\n                        var scope = scopes[id];\n                        privateMethods.deactivate($dialog);\n\n                        if (!scope) {\n                            // Already closed\n                            return;\n                        }\n\n                        if (typeof $window.Hammer !== 'undefined') {\n                            var hammerTime = scope.hammerTime;\n                            hammerTime.off('tap', closeByDocumentHandler);\n                            hammerTime.destroy && hammerTime.destroy();\n                            delete scope.hammerTime;\n                        } else {\n                            $dialog.unbind('click');\n                        }\n\n                        if (dialogsCount === 1) {\n                            $elements.body.unbind('keydown', privateMethods.onDocumentKeydown);\n                        }\n\n                        if (!$dialog.hasClass('ngdialog-closing')){\n                            dialogsCount -= 1;\n                        }\n\n                        var previousFocus = $dialog.data('$ngDialogPreviousFocus');\n                        if (previousFocus && previousFocus.focus) {\n                            previousFocus.focus();\n                        }\n\n                        $rootScope.$broadcast('ngDialog.closing', $dialog, value);\n                        dialogsCount = dialogsCount < 0 ? 0 : dialogsCount;\n                        if (animationEndSupport && !options.disableAnimation) {\n                            scope.$destroy();\n                            $dialog.unbind(animationEndEvent).bind(animationEndEvent, function () {\n                                privateMethods.closeDialogElement($dialog, value);\n                            }).addClass('ngdialog-closing');\n                        } else {\n                            scope.$destroy();\n                            privateMethods.closeDialogElement($dialog, value);\n                        }\n                        if (defers[id]) {\n                            defers[id].resolve({\n                                id: id,\n                                value: value,\n                                $dialog: $dialog,\n                                remainingDialogs: dialogsCount\n                            });\n                            delete defers[id];\n                        }\n                        if (scopes[id]) {\n                            delete scopes[id];\n                        }\n                        openIdStack.splice(openIdStack.indexOf(id), 1);\n                        if (!openIdStack.length) {\n                            $elements.body.unbind('keydown', privateMethods.onDocumentKeydown);\n                            keydownIsBound = false;\n                        }\n\n                        if (dialogsCount == 0)\n                        {\n                            closeByDocumentHandler = undefined;\n                        }\n                    },\n\n                    closeDialogElement: function($dialog, value) {\n                        var options = $dialog.data('$ngDialogOptions');\n                        $dialog.remove();\n\n                        activeBodyClasses.splice(activeBodyClasses.indexOf(options.bodyClassName), 1);\n                        if (activeBodyClasses.indexOf(options.bodyClassName) === -1) {\n                            $elements.html.removeClass(options.bodyClassName);\n                            $elements.body.removeClass(options.bodyClassName);\n                        }\n\n                        if (dialogsCount === 0) {\n                            privateMethods.resetBodyPadding();\n                        }\n\n                        $rootScope.$broadcast('ngDialog.closed', $dialog, value);\n                    },\n\n                    closeDialog: function ($dialog, value) {\n                        var preCloseCallback = $dialog.data('$ngDialogPreCloseCallback');\n\n                        if (preCloseCallback && angular.isFunction(preCloseCallback)) {\n\n                            var preCloseCallbackResult = preCloseCallback.call($dialog, value);\n\n                            if (angular.isObject(preCloseCallbackResult)) {\n                                if (preCloseCallbackResult.closePromise) {\n                                    preCloseCallbackResult.closePromise.then(function () {\n                                        privateMethods.performCloseDialog($dialog, value);\n                                    }, function () {\n                                        return false;\n                                    });\n                                } else {\n                                    preCloseCallbackResult.then(function () {\n                                        privateMethods.performCloseDialog($dialog, value);\n                                    }, function () {\n                                        return false;\n                                    });\n                                }\n                            } else if (preCloseCallbackResult !== false) {\n                                privateMethods.performCloseDialog($dialog, value);\n                            } else {\n                                return false;\n                            }\n                        } else {\n                            privateMethods.performCloseDialog($dialog, value);\n                        }\n                    },\n\n                    onTrapFocusKeydown: function(ev) {\n                        var el = angular.element(ev.currentTarget);\n                        var $dialog;\n\n                        if (el.hasClass('ngdialog')) {\n                            $dialog = el;\n                        } else {\n                            $dialog = privateMethods.getActiveDialog();\n\n                            if ($dialog === null) {\n                                return;\n                            }\n                        }\n\n                        var isTab = (ev.keyCode === 9);\n                        var backward = (ev.shiftKey === true);\n\n                        if (isTab) {\n                            privateMethods.handleTab($dialog, ev, backward);\n                        }\n                    },\n\n                    handleTab: function($dialog, ev, backward) {\n                        var focusableElements = privateMethods.getFocusableElements($dialog);\n\n                        if (focusableElements.length === 0) {\n                            if (document.activeElement && document.activeElement.blur) {\n                                document.activeElement.blur();\n                            }\n                            return;\n                        }\n\n                        var currentFocus = document.activeElement;\n                        var focusIndex = Array.prototype.indexOf.call(focusableElements, currentFocus);\n\n                        var isFocusIndexUnknown = (focusIndex === -1);\n                        var isFirstElementFocused = (focusIndex === 0);\n                        var isLastElementFocused = (focusIndex === focusableElements.length - 1);\n\n                        var cancelEvent = false;\n\n                        if (backward) {\n                            if (isFocusIndexUnknown || isFirstElementFocused) {\n                                focusableElements[focusableElements.length - 1].focus();\n                                cancelEvent = true;\n                            }\n                        } else {\n                            if (isFocusIndexUnknown || isLastElementFocused) {\n                                focusableElements[0].focus();\n                                cancelEvent = true;\n                            }\n                        }\n\n                        if (cancelEvent) {\n                            ev.preventDefault();\n                            ev.stopPropagation();\n                        }\n                    },\n\n                    autoFocus: function($dialog) {\n                        var dialogEl = $dialog[0];\n\n                        // Browser's (Chrome 40, Forefix 37, IE 11) don't appear to honor autofocus on the dialog, but we should\n                        var autoFocusEl = dialogEl.querySelector('*[autofocus]');\n                        if (autoFocusEl !== null) {\n                            autoFocusEl.focus();\n\n                            if (document.activeElement === autoFocusEl) {\n                                return;\n                            }\n\n                            // Autofocus element might was display: none, so let's continue\n                        }\n\n                        var focusableElements = privateMethods.getFocusableElements($dialog);\n\n                        if (focusableElements.length > 0) {\n                            focusableElements[0].focus();\n                            return;\n                        }\n\n                        // We need to focus something for the screen readers to notice the dialog\n                        var contentElements = privateMethods.filterVisibleElements(dialogEl.querySelectorAll('h1,h2,h3,h4,h5,h6,p,span'));\n\n                        if (contentElements.length > 0) {\n                            var contentElement = contentElements[0];\n                            $el(contentElement).attr('tabindex', '-1').css('outline', '0');\n                            contentElement.focus();\n                        }\n                    },\n\n                    getFocusableElements: function ($dialog) {\n                        var dialogEl = $dialog[0];\n\n                        var rawElements = dialogEl.querySelectorAll(focusableElementSelector);\n\n                        // Ignore untabbable elements, ie. those with tabindex = -1\n                        var tabbableElements = privateMethods.filterTabbableElements(rawElements);\n\n                        return privateMethods.filterVisibleElements(tabbableElements);\n                    },\n\n                    filterTabbableElements: function (els) {\n                        var tabbableFocusableElements = [];\n\n                        for (var i = 0; i < els.length; i++) {\n                            var el = els[i];\n\n                            if ($el(el).attr('tabindex') !== '-1') {\n                                tabbableFocusableElements.push(el);\n                            }\n                        }\n\n                        return tabbableFocusableElements;\n                    },\n\n                    filterVisibleElements: function (els) {\n                        var visibleFocusableElements = [];\n\n                        for (var i = 0; i < els.length; i++) {\n                            var el = els[i];\n\n                            if (el.offsetWidth > 0 || el.offsetHeight > 0) {\n                                visibleFocusableElements.push(el);\n                            }\n                        }\n\n                        return visibleFocusableElements;\n                    },\n\n                    getActiveDialog: function () {\n                        var dialogs = document.querySelectorAll('.ngdialog');\n\n                        if (dialogs.length === 0) {\n                            return null;\n                        }\n\n                        // TODO: This might be incorrect if there are a mix of open dialogs with different 'appendTo' values\n                        return $el(dialogs[dialogs.length - 1]);\n                    },\n\n                    applyAriaAttributes: function ($dialog, options) {\n                        if (options.ariaAuto) {\n                            if (!options.ariaRole) {\n                                var detectedRole = (privateMethods.getFocusableElements($dialog).length > 0) ?\n                                    'dialog' :\n                                    'alertdialog';\n\n                                options.ariaRole = detectedRole;\n                            }\n\n                            if (!options.ariaLabelledBySelector) {\n                                options.ariaLabelledBySelector = 'h1,h2,h3,h4,h5,h6';\n                            }\n\n                            if (!options.ariaDescribedBySelector) {\n                                options.ariaDescribedBySelector = 'article,section,p';\n                            }\n                        }\n\n                        if (options.ariaRole) {\n                            $dialog.attr('role', options.ariaRole);\n                        }\n\n                        privateMethods.applyAriaAttribute(\n                            $dialog, 'aria-labelledby', options.ariaLabelledById, options.ariaLabelledBySelector);\n\n                        privateMethods.applyAriaAttribute(\n                            $dialog, 'aria-describedby', options.ariaDescribedById, options.ariaDescribedBySelector);\n                    },\n\n                    applyAriaAttribute: function($dialog, attr, id, selector) {\n                        if (id) {\n                            $dialog.attr(attr, id);\n                            return;\n                        }\n\n                        if (selector) {\n                            var dialogId = $dialog.attr('id');\n\n                            var firstMatch = $dialog[0].querySelector(selector);\n\n                            if (!firstMatch) {\n                                return;\n                            }\n\n                            var generatedId = dialogId + '-' + attr;\n\n                            $el(firstMatch).attr('id', generatedId);\n\n                            $dialog.attr(attr, generatedId);\n\n                            return generatedId;\n                        }\n                    },\n\n                    detectUIRouter: function() {\n                        // Detect if ui-router module is installed\n                        // Returns ui-router version string if installed\n                        // Otherwise false\n\n                        if ($injector.has('$transitions')) {\n                            // Only 1.0.0+ ui.router allows us to inject $transitions\n                            return UI_ROUTER_VERSION_ONE_PLUS;\n                        }\n                        else if ($injector.has('$state')) {\n                            // The legacy ui.router allows us to inject $state\n                            return UI_ROUTER_VERSION_LEGACY;\n                        }\n                        return false;\n                    },\n\n                    getRouterLocationEventName: function() {\n                        if (privateMethods.detectUIRouter()) {\n                            return '$stateChangeStart';\n                        }\n                        return '$locationChangeStart';\n                    }\n                };\n\n                var publicMethods = {\n                    __PRIVATE__: privateMethods,\n\n                    /*\n                     * @param {Object} options:\n                     * - template {String} - id of ng-template, url for partial, plain string (if enabled)\n                     * - plain {Boolean} - enable plain string templates, default false\n                     * - scope {Object}\n                     * - controller {String}\n                     * - controllerAs {String}\n                     * - className {String} - dialog theme class\n                     * - appendClassName {String} - dialog theme class to be appended to defaults\n                     * - disableAnimation {Boolean} - set to true to disable animation\n                     * - showClose {Boolean} - show close button, default true\n                     * - closeByEscape {Boolean} - default true\n                     * - closeByDocument {Boolean} - default true\n                     * - preCloseCallback {String|Function} - user supplied function name/function called before closing dialog (if set)\n                     * - onOpenCallback {String|Function} - user supplied function name/function called after opening dialog (if set)\n                     * - bodyClassName {String} - class added to body at open dialog\n                     * @return {Object} dialog\n                     */\n                    open: function (opts) {\n                        var dialogID = null;\n                        opts = opts || {};\n                        if (openOnePerName && opts.name) {\n                            dialogID = opts.name.toLowerCase().replace(/\\s/g, '-') + '-dialog';\n                            if (this.isOpen(dialogID)) {\n                                return;\n                            }\n                        }\n                        var options = angular.copy(defaults);\n                        var localID = ++globalID;\n                        dialogID = dialogID || 'ngdialog' + localID;\n                        openIdStack.push(dialogID);\n\n                        // Merge opts.data with predefined via setDefaults\n                        if (typeof options.data !== 'undefined') {\n                            if (typeof opts.data === 'undefined') {\n                                opts.data = {};\n                            }\n                            opts.data = angular.merge(angular.copy(options.data), opts.data);\n                        }\n\n                        angular.extend(options, opts);\n\n                        var defer;\n                        defers[dialogID] = defer = $q.defer();\n\n                        var scope;\n                        scopes[dialogID] = scope = angular.isObject(options.scope) ? options.scope.$new() : $rootScope.$new();\n\n                        var $dialog, $dialogParent, $dialogContent;\n\n                        var resolve = angular.extend({}, options.resolve);\n\n                        angular.forEach(resolve, function (value, key) {\n                            resolve[key] = angular.isString(value) ? $injector.get(value) : $injector.invoke(value, null, null, key);\n                        });\n\n                        $q.all({\n                            template: loadTemplate(options.template || options.templateUrl),\n                            locals: $q.all(resolve)\n                        }).then(function (setup) {\n                            var template = setup.template,\n                                locals = setup.locals;\n\n                            if (options.showClose) {\n                                template += '<button aria-label=\"Dismiss\" class=\"ngdialog-close\"></button>';\n                            }\n\n                            var hasOverlayClass = options.overlay ? '' : ' ngdialog-no-overlay';\n                            $dialog = $el('<div id=\"' + dialogID + '\" class=\"ngdialog' + hasOverlayClass + '\"></div>');\n                            $dialog.html((options.overlay ?\n                                '<div class=\"ngdialog-overlay\"></div><div class=\"ngdialog-content\" role=\"document\">' + template + '</div>' :\n                                '<div class=\"ngdialog-content\" role=\"document\">' + template + '</div>'));\n\n                            $dialog.data('$ngDialogOptions', options);\n\n                            scope.ngDialogId = dialogID;\n\n                            if (options.data && angular.isString(options.data)) {\n                                var firstLetter = options.data.replace(/^\\s*/, '')[0];\n                                scope.ngDialogData = (firstLetter === '{' || firstLetter === '[') ? angular.fromJson(options.data) : new String(options.data);\n                                scope.ngDialogData.ngDialogId = dialogID;\n                            } else if (options.data && angular.isObject(options.data)) {\n                                scope.ngDialogData = options.data;\n                                scope.ngDialogData.ngDialogId = dialogID;\n                            }\n\n                            if (options.className) {\n                                $dialog.addClass(options.className);\n                            }\n\n                            if (options.appendClassName) {\n                                $dialog.addClass(options.appendClassName);\n                            }\n\n                            if (options.width) {\n                                $dialogContent = $dialog[0].querySelector('.ngdialog-content');\n                                if (angular.isString(options.width)) {\n                                    $dialogContent.style.width = options.width;\n                                } else {\n                                    $dialogContent.style.width = options.width + 'px';\n                                }\n                            }\n\n                            if (options.height) {\n                                $dialogContent = $dialog[0].querySelector('.ngdialog-content');\n                                if (angular.isString(options.height)) {\n                                    $dialogContent.style.height = options.height;\n                                } else {\n                                    $dialogContent.style.height = options.height + 'px';\n                                }\n                            }\n\n                            if (options.disableAnimation) {\n                                $dialog.addClass(disabledAnimationClass);\n                            }\n\n                            if (options.appendTo && angular.isString(options.appendTo)) {\n                                $dialogParent = angular.element(document.querySelector(options.appendTo));\n                            } else {\n                                $dialogParent = $elements.body;\n                            }\n\n                            privateMethods.applyAriaAttributes($dialog, options);\n\n                            [\n                                { name: '$ngDialogPreCloseCallback', value: options.preCloseCallback },\n                                { name: '$ngDialogOnOpenCallback', value: options.onOpenCallback }\n                            ].forEach(function (option) {\n                                if (option.value) {\n                                    var callback;\n\n                                    if (angular.isFunction(option.value)) {\n                                        callback = option.value;\n                                    } else if (angular.isString(option.value)) {\n                                        if (scope) {\n                                            if (angular.isFunction(scope[option.value])) {\n                                                callback = scope[option.value];\n                                            } else if (scope.$parent && angular.isFunction(scope.$parent[option.value])) {\n                                                callback = scope.$parent[option.value];\n                                            } else if ($rootScope && angular.isFunction($rootScope[option.value])) {\n                                                callback = $rootScope[option.value];\n                                            }\n                                        }\n                                    }\n\n                                    if (callback) {\n                                        $dialog.data(option.name, callback);\n                                    }\n                                }\n                            });\n\n                            scope.closeThisDialog = function (value) {\n                                privateMethods.closeDialog($dialog, value);\n                            };\n\n                            if (options.controller && (angular.isString(options.controller) || angular.isArray(options.controller) || angular.isFunction(options.controller))) {\n\n                                var label;\n\n                                if (options.controllerAs && angular.isString(options.controllerAs)) {\n                                    label = options.controllerAs;\n                                }\n\n                                var controllerInstance = $controller(options.controller, angular.extend(\n                                    locals,\n                                    {\n                                        $scope: scope,\n                                        $element: $dialog\n                                    }),\n                                    true,\n                                    label\n                                );\n\n                                if(options.bindToController) {\n                                    angular.extend(controllerInstance.instance, {ngDialogId: scope.ngDialogId, ngDialogData: scope.ngDialogData, closeThisDialog: scope.closeThisDialog, confirm: scope.confirm});\n                                }\n\n                                if(typeof controllerInstance === 'function'){\n                                    $dialog.data('$ngDialogControllerController', controllerInstance());\n                                } else {\n                                    $dialog.data('$ngDialogControllerController', controllerInstance);\n                                }\n                            }\n\n                            $timeout(function () {\n                                var $activeDialogs = document.querySelectorAll('.ngdialog');\n                                privateMethods.deactivateAll($activeDialogs);\n\n                                $compile($dialog)(scope);\n                                var widthDiffs = $window.innerWidth - $elements.body.prop('clientWidth');\n                                $elements.html.addClass(options.bodyClassName);\n                                $elements.body.addClass(options.bodyClassName);\n                                activeBodyClasses.push(options.bodyClassName);\n                                var scrollBarWidth = widthDiffs - ($window.innerWidth - $elements.body.prop('clientWidth'));\n                                if (scrollBarWidth > 0) {\n                                    privateMethods.setBodyPadding(scrollBarWidth);\n                                }\n                                $dialogParent.append($dialog);\n\n                                privateMethods.activate($dialog);\n\n                                if (options.trapFocus) {\n                                    privateMethods.autoFocus($dialog);\n                                }\n\n                                if (options.name) {\n                                    $rootScope.$broadcast('ngDialog.opened', {dialog: $dialog, name: options.name});\n                                } else {\n                                    $rootScope.$broadcast('ngDialog.opened', $dialog);\n                                }\n                                var onOpenCallback = $dialog.data('$ngDialogOnOpenCallback');\n                                if (onOpenCallback && angular.isFunction(onOpenCallback)) {\n                                    onOpenCallback.call($dialog);\n                                }\n\n                            });\n\n                            if (!keydownIsBound) {\n                                $elements.body.bind('keydown', privateMethods.onDocumentKeydown);\n                                keydownIsBound = true;\n                            }\n\n                            if (options.closeByNavigation) {\n                                closeByNavigationDialogStack.push($dialog);\n                            }\n\n                            if (options.preserveFocus) {\n                                $dialog.data('$ngDialogPreviousFocus', document.activeElement);\n                            }\n\n                            closeByDocumentHandler = function (event) {\n                                var isOverlay = options.closeByDocument ? $el(event.target).hasClass('ngdialog-overlay') : false;\n                                var isCloseBtn = $el(event.target).hasClass('ngdialog-close');\n\n                                if (isOverlay || isCloseBtn) {\n                                    publicMethods.close($dialog.attr('id'), isCloseBtn ? '$closeButton' : '$document');\n                                }\n                            };\n\n                            if (typeof $window.Hammer !== 'undefined') {\n                                var hammerTime = scope.hammerTime = $window.Hammer($dialog[0]);\n                                hammerTime.on('tap', closeByDocumentHandler);\n                            } else {\n                                $dialog.bind('click', closeByDocumentHandler);\n                            }\n\n                            dialogsCount += 1;\n\n                            return publicMethods;\n                        });\n\n                        return {\n                            id: dialogID,\n                            closePromise: defer.promise,\n                            close: function (value) {\n                                privateMethods.closeDialog($dialog, value);\n                            }\n                        };\n\n                        function loadTemplateUrl (tmpl, config) {\n                            var config = config || {};\n                            config.headers = config.headers || {};\n\n                            angular.extend(config.headers, {'Accept': 'text/html'});\n\n                            $rootScope.$broadcast('ngDialog.templateLoading', tmpl);\n                            return $http.get(tmpl, config).then(function(res) {\n                                $rootScope.$broadcast('ngDialog.templateLoaded', tmpl);\n                                return res.data || '';\n                            });\n                        }\n\n                        function loadTemplate (tmpl) {\n                            if (!tmpl) {\n                                return 'Empty template';\n                            }\n\n                            if (angular.isString(tmpl) && options.plain) {\n                                return tmpl;\n                            }\n\n                            if (typeof options.cache === 'boolean' && !options.cache) {\n                                return loadTemplateUrl(tmpl, {cache: false});\n                            }\n\n                            return loadTemplateUrl(tmpl, {cache: $templateCache});\n                        }\n                    },\n\n                    /*\n                     * @param {Object} options:\n                     * - template {String} - id of ng-template, url for partial, plain string (if enabled)\n                     * - plain {Boolean} - enable plain string templates, default false\n                     * - name {String}\n                     * - scope {Object}\n                     * - controller {String}\n                     * - controllerAs {String}\n                     * - className {String} - dialog theme class\n                     * - appendClassName {String} - dialog theme class to be appended to defaults\n                     * - showClose {Boolean} - show close button, default true\n                     * - closeByEscape {Boolean} - default false\n                     * - closeByDocument {Boolean} - default false\n                     * - preCloseCallback {String|Function} - user supplied function name/function called before closing dialog (if set); not called on confirm\n                     * - bodyClassName {String} - class added to body at open dialog\n                     *\n                     * @return {Object} dialog\n                     */\n                    openConfirm: function (opts) {\n                        var defer = $q.defer();\n                        var options = angular.copy(defaults);\n\n                        opts = opts || {};\n\n                        // Merge opts.data with predefined via setDefaults\n                        if (typeof options.data !== 'undefined') {\n                            if (typeof opts.data === 'undefined') {\n                                opts.data = {};\n                            }\n                            opts.data = angular.merge(angular.copy(options.data), opts.data);\n                        }\n\n                        angular.extend(options, opts);\n\n                        options.scope = angular.isObject(options.scope) ? options.scope.$new() : $rootScope.$new();\n                        options.scope.confirm = function (value) {\n                            defer.resolve(value);\n                            var $dialog = $el(document.getElementById(openResult.id));\n                            privateMethods.performCloseDialog($dialog, value);\n                        };\n\n                        var openResult = publicMethods.open(options);\n                        if (openResult) {\n                            openResult.closePromise.then(function (data) {\n                                if (data) {\n                                    return defer.reject(data.value);\n                                }\n                                return defer.reject();\n                            });\n                            return defer.promise;\n                        }\n                    },\n\n                    isOpen: function(id) {\n                        var $dialog = $el(document.getElementById(id));\n                        return $dialog.length > 0;\n                    },\n\n                    /*\n                     * @param {String} id\n                     * @return {Object} dialog\n                     */\n                    close: function (id, value) {\n                        var $dialog = $el(document.getElementById(id));\n\n                        if ($dialog.length) {\n                            privateMethods.closeDialog($dialog, value);\n                        } else {\n                            if (id === '$escape') {\n                                var topDialogId = openIdStack[openIdStack.length - 1];\n                                $dialog = $el(document.getElementById(topDialogId));\n                                if ($dialog.data('$ngDialogOptions').closeByEscape) {\n                                    privateMethods.closeDialog($dialog, '$escape');\n                                }\n                            } else {\n                                publicMethods.closeAll(value);\n                            }\n                        }\n\n                        return publicMethods;\n                    },\n\n                    closeAll: function (value) {\n                        var $all = document.querySelectorAll('.ngdialog');\n\n                        // Reverse order to ensure focus restoration works as expected\n                        for (var i = $all.length - 1; i >= 0; i--) {\n                            var dialog = $all[i];\n                            privateMethods.closeDialog($el(dialog), value);\n                        }\n                    },\n\n                    getOpenDialogs: function() {\n                        return openIdStack;\n                    },\n\n                    getDefaults: function () {\n                        return defaults;\n                    }\n                };\n\n                angular.forEach(\n                    ['html', 'body'],\n                    function(elementName) {\n                        $elements[elementName] = $document.find(elementName);\n                        if (forceElementsReload[elementName]) {\n                            var eventName = privateMethods.getRouterLocationEventName();\n                            $rootScope.$on(eventName, function () {\n                                $elements[elementName] = $document.find(elementName);\n                            });\n                        }\n                    }\n                );\n\n                // Listen to navigation events to close dialog\n                var uiRouterVersion = privateMethods.detectUIRouter();\n                if (uiRouterVersion === UI_ROUTER_VERSION_ONE_PLUS) {\n                    var $transitions = $injector.get('$transitions');\n                    $transitions.onStart({}, function (trans) {\n                        while (closeByNavigationDialogStack.length > 0) {\n                            var toCloseDialog = closeByNavigationDialogStack.pop();\n                            if (privateMethods.closeDialog(toCloseDialog) === false) {\n                                return false;\n                            }\n                        }\n                    });\n                }\n                else {\n                    var eventName = uiRouterVersion === UI_ROUTER_VERSION_LEGACY ? '$stateChangeStart' : '$locationChangeStart';\n                    $rootScope.$on(eventName, function ($event) {\n                        while (closeByNavigationDialogStack.length > 0) {\n                            var toCloseDialog = closeByNavigationDialogStack.pop();\n                            if (privateMethods.closeDialog(toCloseDialog) === false) {\n                                $event.preventDefault();\n                            }\n                        }\n                    });\n                }\n\n                return publicMethods;\n            }];\n    });\n\n    m.directive('ngDialog', ['ngDialog', function (ngDialog) {\n        return {\n            restrict: 'A',\n            scope: {\n                ngDialogScope: '='\n            },\n            link: function (scope, elem, attrs) {\n                elem.on('click', function (e) {\n                    e.preventDefault();\n\n                    var ngDialogScope = angular.isDefined(scope.ngDialogScope) ? scope.ngDialogScope : 'noScope';\n                    angular.isDefined(attrs.ngDialogClosePrevious) && ngDialog.close(attrs.ngDialogClosePrevious);\n\n                    var defaults = ngDialog.getDefaults();\n\n                    ngDialog.open({\n                        template: attrs.ngDialog,\n                        className: attrs.ngDialogClass || defaults.className,\n                        appendClassName: attrs.ngDialogAppendClass,\n                        controller: attrs.ngDialogController,\n                        controllerAs: attrs.ngDialogControllerAs,\n                        bindToController: attrs.ngDialogBindToController,\n                        disableAnimation: attrs.ngDialogDisableAnimation,\n                        scope: ngDialogScope,\n                        data: attrs.ngDialogData,\n                        showClose: attrs.ngDialogShowClose === 'false' ? false : (attrs.ngDialogShowClose === 'true' ? true : defaults.showClose),\n                        closeByDocument: attrs.ngDialogCloseByDocument === 'false' ? false : (attrs.ngDialogCloseByDocument === 'true' ? true : defaults.closeByDocument),\n                        closeByEscape: attrs.ngDialogCloseByEscape === 'false' ? false : (attrs.ngDialogCloseByEscape === 'true' ? true : defaults.closeByEscape),\n                        overlay: attrs.ngDialogOverlay === 'false' ? false : (attrs.ngDialogOverlay === 'true' ? true : defaults.overlay),\n                        preCloseCallback: attrs.ngDialogPreCloseCallback || defaults.preCloseCallback,\n                        onOpenCallback: attrs.ngDialogOnOpenCallback || defaults.onOpenCallback,\n                        bodyClassName: attrs.ngDialogBodyClass || defaults.bodyClassName\n                    });\n                });\n            }\n        };\n    }]);\n\n    return m;\n}));\n"],"sourceRoot":"assets/scripts/"}