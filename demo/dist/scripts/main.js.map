{"version":3,"sources":["../bower_components/angular-json-pretty/dist/angular-json-pretty.min.js","../bower_components/what-input/dist/what-input.js"],"names":["n","t","e","exports","module","define","amd","JSONPretty","window","angular","r","a","o","replace","JSON","parse","stringify","restrict","scope","data","link","$watch","html","directive","root","factory","this","modules","__webpack_require__","moduleId","installedModules","id","loaded","call","m","c","p","docElem","document","documentElement","currentInput","currentIntent","formInputs","ignoreMap","inputMap","keyup","mousedown","mousemove","MSPointerDown","MSPointerMove","pointerdown","pointermove","touchstart","inputTypes","isBuffering","pointerMap","2","3","4","touchTimer","addListeners","PointerEvent","addEventListener","updateInput","setIntent","MSPointerEvent","touchBuffer","detectWheel","event","eventKey","which","value","type","pointerType","activeElem","activeElement","activeInput","nodeName","indexOf","toLowerCase","setInput","setAttribute","push","className","clearTimeout","setTimeout","createElement","undefined","onmousewheel","Array","prototype","ask","opt","types"],"mappings":"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","file":"main.js","sourcesContent":["!function(n,t,e){\"use strict\";\"object\"==typeof exports?module.exports=e():\"function\"==typeof define&&define.amd?define([],e):n.JSONPretty=e()}(window,angular,function(){\"use strict\";var n=function(n,t,e,r,a){var s=\"<span class=json-key>\",c=\"<span class=json-value>\",i=\"<span class=json-string>\",o=t||\"\";return e&&(o=o+s+e.replace(/[\": ]/g,\"\")+\"</span>: \"),r&&(o=o+('\"'==r[0]?i:c)+r+\"</span>\"),o+(a||\"\")},t=function(t){var e=/^( *)(\"[\\w]+\": )?(\"[^\"]*\"|[\\w.+-]*)?([,[{])?$/gm,r=t;try{return\"string\"==typeof t&&(r=JSON.parse(t)),JSON.stringify(r,null,3).replace(/&/g,\"&amp;\").replace(/\\\\\"/g,\"&quot;\").replace(/</g,\"&lt;\").replace(/>/g,\"&gt;\").replace(e,n)}catch(a){return\"invalid JSON\"}},e=angular.module(\"angular-json-pretty\",[]),r=function(){return{restrict:\"A\",scope:{data:\"=\"},link:function(n,e){n.$watch(\"data\",function(n){n&&e.html(t(n))},!0)}}};return e.directive(\"jsonPretty\",[r]),e});\n","/**\n * what-input - A global utility for tracking the current input method (mouse, keyboard or touch).\n * @version v4.0.6\n * @link https://github.com/ten1seven/what-input\n * @license MIT\n */\n(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"whatInput\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"whatInput\"] = factory();\n\telse\n\t\troot[\"whatInput\"] = factory();\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n\n\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports) {\n\n\tmodule.exports = (function() {\n\n\t  /*\n\t    ---------------\n\t    Variables\n\t    ---------------\n\t  */\n\n\t  // cache document.documentElement\n\t  var docElem = document.documentElement;\n\n\t  // last used input type\n\t  var currentInput = 'initial';\n\n\t  // last used input intent\n\t  var currentIntent = null;\n\n\t  // form input types\n\t  var formInputs = [\n\t    'input',\n\t    'select',\n\t    'textarea'\n\t  ];\n\n\t  // list of modifier keys commonly used with the mouse and\n\t  // can be safely ignored to prevent false keyboard detection\n\t  var ignoreMap = [\n\t    16, // shift\n\t    17, // control\n\t    18, // alt\n\t    91, // Windows key / left Apple cmd\n\t    93  // Windows menu / right Apple cmd\n\t  ];\n\n\t  // mapping of events to input types\n\t  var inputMap = {\n\t    'keyup': 'keyboard',\n\t    'mousedown': 'mouse',\n\t    'mousemove': 'mouse',\n\t    'MSPointerDown': 'pointer',\n\t    'MSPointerMove': 'pointer',\n\t    'pointerdown': 'pointer',\n\t    'pointermove': 'pointer',\n\t    'touchstart': 'touch'\n\t  };\n\n\t  // array of all used input types\n\t  var inputTypes = [];\n\n\t  // boolean: true if touch buffer timer is running\n\t  var isBuffering = false;\n\n\t  // map of IE 10 pointer events\n\t  var pointerMap = {\n\t    2: 'touch',\n\t    3: 'touch', // treat pen like touch\n\t    4: 'mouse'\n\t  };\n\n\t  // touch buffer timer\n\t  var touchTimer = null;\n\n\n\t  /*\n\t    ---------------\n\t    Set up\n\t    ---------------\n\t  */\n\n\t  var setUp = function() {\n\n\t    // add correct mouse wheel event mapping to `inputMap`\n\t    inputMap[detectWheel()] = 'mouse';\n\n\t    addListeners();\n\t    setInput();\n\t  };\n\n\n\t  /*\n\t    ---------------\n\t    Events\n\t    ---------------\n\t  */\n\n\t  var addListeners = function() {\n\n\t    // `pointermove`, `MSPointerMove`, `mousemove` and mouse wheel event binding\n\t    // can only demonstrate potential, but not actual, interaction\n\t    // and are treated separately\n\n\t    // pointer events (mouse, pen, touch)\n\t    if (window.PointerEvent) {\n\t      docElem.addEventListener('pointerdown', updateInput);\n\t      docElem.addEventListener('pointermove', setIntent);\n\t    } else if (window.MSPointerEvent) {\n\t      docElem.addEventListener('MSPointerDown', updateInput);\n\t      docElem.addEventListener('MSPointerMove', setIntent);\n\t    } else {\n\n\t      // mouse events\n\t      docElem.addEventListener('mousedown', updateInput);\n\t      docElem.addEventListener('mousemove', setIntent);\n\n\t      // touch events\n\t      if ('ontouchstart' in window) {\n\t        docElem.addEventListener('touchstart', touchBuffer);\n\t      }\n\t    }\n\n\t    // mouse wheel\n\t    docElem.addEventListener(detectWheel(), setIntent);\n\n\t    // keyboard events\n\t    docElem.addEventListener('keydown', updateInput);\n\t    docElem.addEventListener('keyup', updateInput);\n\t  };\n\n\t  // checks conditions before updating new input\n\t  var updateInput = function(event) {\n\n\t    // only execute if the touch buffer timer isn't running\n\t    if (!isBuffering) {\n\t      var eventKey = event.which;\n\t      var value = inputMap[event.type];\n\t      if (value === 'pointer') value = pointerType(event);\n\n\t      if (\n\t        currentInput !== value ||\n\t        currentIntent !== value\n\t      ) {\n\n\t        var activeElem = document.activeElement;\n\t        var activeInput = (\n\t          activeElem &&\n\t          activeElem.nodeName &&\n\t          formInputs.indexOf(activeElem.nodeName.toLowerCase()) === -1\n\t        ) ? true : false;\n\n\t        if (\n\t          value === 'touch' ||\n\n\t          // ignore mouse modifier keys\n\t          (value === 'mouse' && ignoreMap.indexOf(eventKey) === -1) ||\n\n\t          // don't switch if the current element is a form input\n\t          (value === 'keyboard' && activeInput)\n\t        ) {\n\n\t          // set the current and catch-all variable\n\t          currentInput = currentIntent = value;\n\n\t          setInput();\n\t        }\n\t      }\n\t    }\n\t  };\n\n\t  // updates the doc and `inputTypes` array with new input\n\t  var setInput = function() {\n\t    docElem.setAttribute('data-whatinput', currentInput);\n\t    docElem.setAttribute('data-whatintent', currentInput);\n\n\t    if (inputTypes.indexOf(currentInput) === -1) {\n\t      inputTypes.push(currentInput);\n\t      docElem.className += ' whatinput-types-' + currentInput;\n\t    }\n\t  };\n\n\t  // updates input intent for `mousemove` and `pointermove`\n\t  var setIntent = function(event) {\n\n\t    // only execute if the touch buffer timer isn't running\n\t    if (!isBuffering) {\n\t      var value = inputMap[event.type];\n\t      if (value === 'pointer') value = pointerType(event);\n\n\t      if (currentIntent !== value) {\n\t        currentIntent = value;\n\n\t        docElem.setAttribute('data-whatintent', currentIntent);\n\t      }\n\t    }\n\t  };\n\n\t  // buffers touch events because they frequently also fire mouse events\n\t  var touchBuffer = function(event) {\n\n\t    // clear the timer if it happens to be running\n\t    window.clearTimeout(touchTimer);\n\n\t    // set the current input\n\t    updateInput(event);\n\n\t    // set the isBuffering to `true`\n\t    isBuffering = true;\n\n\t    // run the timer\n\t    touchTimer = window.setTimeout(function() {\n\n\t      // if the timer runs out, set isBuffering back to `false`\n\t      isBuffering = false;\n\t    }, 200);\n\t  };\n\n\n\t  /*\n\t    ---------------\n\t    Utilities\n\t    ---------------\n\t  */\n\n\t  var pointerType = function(event) {\n\t   if (typeof event.pointerType === 'number') {\n\t      return pointerMap[event.pointerType];\n\t   } else {\n\t      return (event.pointerType === 'pen') ? 'touch' : event.pointerType; // treat pen like touch\n\t   }\n\t  };\n\n\t  // detect version of mouse wheel event to use\n\t  // via https://developer.mozilla.org/en-US/docs/Web/Events/wheel\n\t  var detectWheel = function() {\n\t    return 'onwheel' in document.createElement('div') ?\n\t      'wheel' : // Modern browsers support \"wheel\"\n\n\t      document.onmousewheel !== undefined ?\n\t        'mousewheel' : // Webkit and IE support at least \"mousewheel\"\n\t        'DOMMouseScroll'; // let's assume that remaining browsers are older Firefox\n\t  };\n\n\n\t  /*\n\t    ---------------\n\t    Init\n\n\t    don't start script unless browser cuts the mustard\n\t    (also passes if polyfills are used)\n\t    ---------------\n\t  */\n\n\t  if (\n\t    'addEventListener' in window &&\n\t    Array.prototype.indexOf\n\t  ) {\n\t    setUp();\n\t  }\n\n\n\t  /*\n\t    ---------------\n\t    API\n\t    ---------------\n\t  */\n\n\t  return {\n\n\t    // returns string: the current input type\n\t    // opt: 'loose'|'strict'\n\t    // 'strict' (default): returns the same value as the `data-whatinput` attribute\n\t    // 'loose': includes `data-whatintent` value if it's more current than `data-whatinput`\n\t    ask: function(opt) { return (opt === 'loose') ? currentIntent : currentInput; },\n\n\t    // returns array: all the detected input types\n\t    types: function() { return inputTypes; }\n\n\t  };\n\n\t}());\n\n\n/***/ }\n/******/ ])\n});\n;"],"sourceRoot":"assets/scripts/"}